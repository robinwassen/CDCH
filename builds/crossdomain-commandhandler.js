// Generated by CoffeeScript 1.3.3
(function() {
  var EventObject,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventObject = (function() {
    var listeners;

    function EventObject() {}

    listeners = {};

    EventObject.prototype.addEventListener = function(eventName, callback) {
      if (!(listeners[eventName] != null)) {
        listeners[eventName] = [];
      }
      return listeners[eventName].push(callback);
    };

    EventObject.prototype.removeEventListener = function(eventName, callback) {
      var callbacks;
      callbacks = listeners[eventName];
      if ((callbacks != null) && -1 < callbacks.indexOf(callback)) {
        return callbacks.splice(callbacks.indexOf(callback), 1);
      }
    };

    EventObject.prototype.dispatchEvent = function(eventName, args) {
      var callback, _i, _len, _ref, _results;
      if (!(args != null)) {
        args = [];
      } else if (!(args instanceof Array)) {
        args = [args];
      }
      while (args[0] instanceof Array && args.length === 1) {
        args = args[0];
      }
      if (listeners[eventName] != null) {
        _ref = listeners[eventName];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          try {
            _results.push(callback.apply(null, args));
          } catch (error) {
            throw "EventObject error: Failed to call apply on callback, check your listeners. \n\n callback function: " + callback + " \n\n error: " + error;
          }
        }
        return _results;
      }
    };

    return EventObject;

  })();

  window.CrossDomainCommandHandler = (function(_super) {
    var isJson;

    __extends(CrossDomainCommandHandler, _super);

    isJson = function(obj) {
      try {
        JSON.parse(obj);
        return true;
      } catch (error) {
        return false;
      }
    };

    function CrossDomainCommandHandler(target) {
      this.target = target;
      window.addEventListener("message", this.handleIncomingCommand.bind(this), false);
    }

    CrossDomainCommandHandler.prototype.handleIncomingCommand = function(event) {
      var commandJSON, returnData;
      if (!isJson(event.data)) {
        return;
      }
      commandJSON = JSON.parse(event.data);
      returnData = this.dispatchEvent(commandJSON.commandName, commandJSON.args);
      if (commandJSON.callbackCommandName != null) {
        return this.postCommand(commandJSON.callbackCommandName, null, returnData);
      }
    };

    CrossDomainCommandHandler.prototype.postCommand = function(commandName, callbackCommandName, args) {
      var command, message;
      if (!(args instanceof Array)) {
        args = [args];
      }
      command = {
        commandName: commandName,
        callbackCommandName: callbackCommandName,
        args: args
      };
      message = JSON.stringify(command);
      return this.target.postMessage(message, "*");
    };

    return CrossDomainCommandHandler;

  })(EventObject);

}).call(this);
